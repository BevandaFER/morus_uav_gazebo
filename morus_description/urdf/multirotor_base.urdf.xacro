<?xml version="1.0"?>

<robot xmlns:xacro="http://ros.org/wiki/xacro">
   
  <xacro:macro name="multirotor_base_macro"
    params="robot_namespace mass body_width body_height mesh_file mesh_file_mass *inertia">
    
    <link name="base_link"></link>
    <joint name="base_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <parent link="base_link" />
      <child link="base_link_inertia" />
    </joint>
    <link name="base_link_inertia">
      <inertial>
        <mass value="${mass}" />  <!-- [kg] -->
        <origin xyz="0 0 0" />
        <xacro:insert_block name="inertia" />
      </inertial>

      <visual>
        <origin xyz="0 0 0.125" rpy="0 0 0" />
        <geometry>
          <!-- mesh filename="package://morus_description/meshes/${mesh_file}" scale="1 1 1" / -->
          <box size="${body_width} ${body_width} ${body_height}" /> <!-- [m] [m] [m] -->
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${body_width} ${body_width} ${body_height}" /> <!-- [m] [m] [m] -->
        </geometry>
      </collision>
    </link>

    <!-- IMU -->
    <link name="imu_link">
      <inertial>
        <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0"
          izz="0.00001" />
        <mass value="0.01" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- IMU joint -->
    <joint name="imu_joint" type="revolute">
      <!--origin xyz="0 0 0" rpy="3.1416 0 0" / -->
      <parent link="base_link" />
      <child link="imu_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    
    <!-- attach multirotor_base_plugin to the base_link -->
    <gazebo>
      <plugin filename="librotors_gazebo_multirotor_base_plugin.so" name="rosbag">
        <robotNamespace>$(arg name)</robotNamespace>
        <linkName>base_link</linkName>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
    
  </xacro:macro>

  <!-- Macro file for movable mass. It defines joint between mass and stick, and link which defines actual mass. Stick
  is defined in other macro file-->
  <xacro:macro name="movable_mass" params="mass_number parent mass dimension color x_axis y_axis z_axis orientation *origin *inertia">
    <joint name="stick_to_movable_mass_${mass_number}" type="prismatic">
      <xacro:insert_block name="origin"/>
      <axis xyz="${x_axis} ${y_axis} ${z_axis}"/>
      <parent link="${parent}"/>
      <child link="movable_mass_${mass_number}"/>
      <limit lower="-0.3" upper="0.3" effort="10000" velocity="20"/>
      <dynamics damping="10" />  <!--friction="0.1" used only in Gazebo >= 5.0, damping is the viscous friction damping,
       i.e. Ft = damping * v -->
    </joint>
    <link name="movable_mass_${mass_number}">
      <visual>
        <!--origin rpy="0 0 ${orientation}" xyz="0 0 ${0*movable_mass_dimension/2}"/>
        <origin rpy="0 0 ${orientation}" xyz="0 0 0"/-->
        <geometry>
          <!--mesh filename="package://morus_description/meshes/${mesh_file_mass}"
            scale="1 1 1" /-->
          <box size="${1*dimension} ${1*dimension} ${1*dimension}"/>
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 ${0*movable_mass_dimension/2}"/>
        <geometry>
          <box size="${dimension} ${dimension} ${dimension}"/>
        </geometry>
      </collision>
      <inertial>
        <origin rpy="0 0 0" xyz="0 0 ${0*movable_mass_dimension/2}"/>
        <mass value="${mass}"/>
        <xacro:insert_block name="inertia"/>
      </inertial>
    </link>

    <gazebo reference="movable_mass_${mass_number}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- Rotor joint and link -->
  <xacro:macro name="vertical_rotor"
    params="robot_namespace suffix direction motor_constant moment_constant parent mass_rotor radius_rotor time_constant max_rot_velocity motor_number rotor_drag_coefficient rolling_moment_coefficient color *origin *inertia">
    <joint name="rotor_${motor_number}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="0 0 1" />
      <!-- TODO(ff): not currently set because it's not yet supported -->
      <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
      <parent link="${parent}" />
      <child link="rotor_${motor_number}" />

    </joint>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz> 
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
    <link name="rotor_${motor_number}">
      <inertial>
        <mass value="${mass_rotor}" /> <!-- [kg] -->
        <xacro:insert_block name="inertia" />
      </inertial>
      <visual>
        <!-- origin xyz="10 10 10" rpy="0 0 0" /-->
        <xacro:insert_block name="origin" />
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}"/> <!-- [m] -->
          <!--mesh filename="package://morus_description/meshes/propeller_${direction}.dae"
            scale="0.0025 0.0025 0.0025" /-->
          <!--box size="${2*radius_rotor} 4 0.005"/-->
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" /> <!-- [m] -->
        </geometry>
      </collision>
    </link>
    <gazebo>
      <plugin name="${suffix}_motor_model" filename="librotors_gazebo_motor_model.so">
        <jointName>rotor_${motor_number}_joint</jointName>
        <linkName>rotor_${motor_number}</linkName>
        <turningDirection>${direction}</turningDirection>
        <timeConstant>${time_constant}</timeConstant>
        <maxRotVelocity>${max_rot_velocity}</maxRotVelocity>
        <motorConstant>${motor_constant}</motorConstant>
        <momentConstant>${moment_constant}</momentConstant>
        <commandTopic>${robot_namespace}/command/motors</commandTopic>
        <motorNumber>${motor_number}</motorNumber>
        <rotorDragCoefficient>${rotor_drag_coefficient}</rotorDragCoefficient>
        <rollingMomentCoefficient>${rolling_moment_coefficient}</rollingMomentCoefficient>
        <motorVelocityTopic>${robot_namespace}/motor_vel/${motor_number}</motorVelocityTopic>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
    <gazebo reference="rotor_${motor_number}">
      <material>Gazebo/${color}</material>
    </gazebo>
  </xacro:macro>

  <!-- We add a <transmission> block for every joint that we wish to actuate. -->
  <xacro:macro name="transmisija" params="trans_number joint_name">
    <transmission name="transmission_${trans_number}">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${joint_name}">
        <hardwareInterface>EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="motor_${trans_number}">
        <hardwareInterface>EffortActuatorInterface</hardwareInterface>
        <mechanicalReduction>100</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:macro name="landing_gear" params="gear_num parent mass dim_x dim_y dim_z *origin *inertia">
    <joint name="land_gear_${gear_num}" type="fixed">
      <xacro:insert_block name="origin"/>
      <axis xyz="0 0 1"/>
      <parent link="${parent}"/>
      <child link="land_gear_${gear_num}"/>
    </joint>
    <link name="land_gear_${gear_num}">
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="0.01 0.01 0.0001"/>
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="${dim_x} ${dim_y} ${dim_z}"/>
        </geometry>
      </collision>
      <inertial>
         <origin rpy="0 0 0" xyz="0 0 0"/>
        <mass value="${mass}"/>
        <xacro:insert_block name="inertia"/>
      </inertial>
    </link>

  </xacro:macro>

   <!-- camera -->
  <xacro:macro name="camera_macro" params="robot_namespace">
    <!-- joint -->
    <joint name="camera_joint" type="fixed">
      <axis xyz="0 1 0" />
      <origin xyz="0 0 0.2" rpy="0 0 0" />
      <parent link="base_link" />
      <child link="camera_link" />
    </joint>

    <!-- link -->
    <link name="camera_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.1 0.1 0.1" />
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.1 0.1 0.1" />
        </geometry>
        <material name="red" />
      </visual>

      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <gazebo reference="camera_link">
      <sensor type="camera" name="camera1">
        <update_rate>30.0</update_rate>
        <camera name="head">
          <horizontal_fov>2</horizontal_fov>
          <image>
            <width>800</width>
            <height>600</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>${robot_namespace}/camera1</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
 
  </xacro:macro>
    
    
  <!--Spawns manipulator:
  Manipulator is modeled as a 2DOF manipulator where first link is 
  fixed to the base. Other two links are conecteted with 
  revolute joints. 
  
  @link_length Length of link.
  @link_width Width of link.
  @link_mass Link mass.
  @parent Parent link of the first (fixed) link.
  @origin Origin block determining position of the first link (its center)..
  @intertia Inertial block definining inertia for each link.
  -->
  <xacro:macro name="manipulator"
  params="link_length link_width link_mass parent suffix *origin *inertia">
    
    <!--_____________________________________________________________-->
    <!--LINK1-->
    <!--_____________________________________________________________-->
    <link name='link_fixed_${suffix}'>
      
      <inertial>
        <mass value="${link_mass/2}" />
        <origin xyz="0 0 0" rpy="0 0 0"/>

        <inertia
          ixx="${(link_length/2 * link_length/2 * link_mass/2)/12}"
          iyy="${(link_length/2 * link_mass/2)/12}"
          izz="${(link_length/2 * link_mass/2)/12}"
          ixy="0.0" ixz="0.0" iyz="0.0" />
      </inertial>
            
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
           <box size="${link_width} ${link_width} ${link_length/2}"/>
        </geometry>
      </visual>
      
      <collision name='collision'>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
           <box size="${link_width} ${link_width} ${link_length/2}"/>
        </geometry>
      </collision>
    </link>
    
    <gazebo reference="link_fixed_${suffix}">
      <material>Gazebo/Red</material>
    </gazebo>
    
    <!--_____________________________________________________________-->
    <!--LINK2-->
    <!--_____________________________________________________________-->
    <link name='link_middle_${suffix}'>
      
      <inertial>
        <mass value="${link_mass}" />
        <origin rpy="0 0 0" xyz="${link_length/2 - link_width/2} 0 0"/>
        <!--origin rpy="0 0 0" xyz="0 0 0"/-->
        <xacro:insert_block name="inertia"/>
      </inertial>
      
      <visual>
        <origin rpy="0 0 0" xyz="${link_length/2 - link_width/2} 0 0"/>
        <geometry>
           <box size="${link_length} ${link_width} ${link_width}"/>
        </geometry>
     </visual>
     
      <collision name='collision'>
        <origin rpy="0 0 0" xyz="${link_length/2 - link_width/2} 0 0"/>
        <geometry>
           <box size="${link_length} ${link_width} ${link_width}"/>
        </geometry>
      </collision>
    </link>
    
    <gazebo reference="link_middle_${suffix}">
      <material>Gazebo/Blue</material>
    </gazebo>
    
    <!--_____________________________________________________________-->
    <!--LINK3-->
    <!--_____________________________________________________________-->
    <link name='link_end_${suffix}'>
      
      <inertial>
        <mass value="${link_mass}"/>
        <xacro:insert_block name="inertia"/>
        <origin xyz="${link_length/2} 0 0" rpy="0 0 0"/>
        <!--origin xyz="0 0 0" rpy="0 0 0"/-->
      </inertial>
      
      <visual>
        <origin xyz="${link_length/2} 0 0" rpy="0 0 0"/>
        <geometry>
           <box size="${link_length} ${link_width} ${link_width}"/>
        </geometry>
      </visual>
      
      <!--collision name='collision'>
        <origin xyz="${link_length/2} 0 0" rpy="0 0 0"/>
        <geometry>
           <box size="${link_length} ${link_width} ${link_width}"/>
        </geometry>
      </collision-->
    </link>
    
    <gazebo reference="link_end_${suffix}">
      <material>Gazebo/Green</material>
    </gazebo>
    
    <!--_____________________________________________________________-->
    <!--JOINT_baseToFixed-->
    <!--Fixed joint connecting base to first link (fixed)-->
    <!--_____________________________________________________________-->
    <joint name="joint_baseToFixed_${suffix}" type="fixed">
        <xacro:insert_block name="origin"/>
        <parent link="${parent}"/>
        <child link="link_fixed_${suffix}"/>
    </joint>
    
    <!--_____________________________________________________________-->
    <!--JOINT_fixedtoMiddle-->
    <!--Revolute joint connecting fixed link to middle link-->
    <!--_____________________________________________________________-->
    <joint name='joint_fixedToMiddle_${suffix}' type='revolute'>
      <parent link="link_fixed_${suffix}" />
      <child link="link_middle_${suffix}" />
      <origin xyz="0 0 ${-(link_length/4 + link_width/2)}" rpy="0 0 0"/>
      <limit upper="1.79769e+308" lower="-1.79769e+308" effort="10" velocity="1"/>
      <axis xyz="0 0 1" />
    </joint>
    
    <!--_____________________________________________________________-->
    <!--JOINT_middleToEnd-->
    <!--Revolute joint connecting middle link to end link.-->
    <!--_____________________________________________________________-->
    <joint name="joint_middleToEnd_${suffix}" type="revolute">
      <parent link="link_middle_${suffix}" />
      <child link="link_end_${suffix}" />
      <origin xyz="${link_length - link_width/2} 0 0" rpy="0 0 0"/>
      <limit upper="1.79769e+308" lower="-1.79769e+308" effort="10" velocity="1" />
      <axis xyz="0 0 1" />
    </joint>
    
  </xacro:macro>
    

  <!-- Spawns a mass at the end of one specified manipulator.
    Payload block is modelled as a cylinder.

  @parent Reference to parent link - the link on which the payload is connected.
  @link_length Length of the parent link.
  @payload_mass Mass of the payload
  @payload_length Length of the payload
  @payload_radius Radius of the payload
  @inertia Inertia of the payload.
  -->
  <xacro:macro name="payload" 
    params="parent link_length payload_mass payload_length payload_radius *inertia">
    
    <link name="payload">
     <inertial>
        <mass value="${payload_mass}" />
        <!--origin rpy="0 0 0" xyz="0 ${-payload_length/2 + link_width/2} 0"/-->
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <xacro:insert_block name="inertia"/>
      </inertial>
      
      <visual>
        <!--origin rpy="0 0 0" xyz="0 ${-link_length/2 + link_width/2} 0"/-->
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
           <cylinder length="${payload_length}" radius="${payload_radius}"/>
        </geometry>
     </visual>
     
      <collision name='collision'>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <!--origin rpy="0 0 0" xyz="0 ${-link_length/2 + link_width/2} 0"/-->
        <geometry>
           <cylinder length="${payload_length}" radius="${payload_radius}"/>
        </geometry>
      </collision>
    </link>

    <joint name="joint_endToPayload" type="fixed">
        <parent link="${parent}"/>
        <child link="payload"/>
        <origin rpy="0 0 0" xyz="${link_length} 0 0"/>
    </joint>
  </xacro:macro>

</robot>
